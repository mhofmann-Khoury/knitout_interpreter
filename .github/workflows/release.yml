# =============================================================================
# PRODUCTION RELEASE TO PYPI WORKFLOW
# =============================================================================
# This workflow builds and publishes your package to the main PyPI repository
# for production use. It includes comprehensive testing and quality checks.
#
# WHEN THIS RUNS:
# - When you create a GitHub Release marked as "production" (not pre-release)
# - Manual trigger with workflow_dispatch for emergency releases
#
# WHAT IT DOES:
# 1. Runs comprehensive test suite across multiple Python versions
# 2. Builds your Python package (wheel and source distribution)
# 3. Validates the package meets PyPI standards
# 4. Publishes to production PyPI (https://pypi.org)
# 5. Builds and deploys documentation to GitHub Pages
# 6. Creates release artifacts for archival
#
# SAFETY FEATURES:
# - Requires manual approval through GitHub environment protection
# - Only runs on non-prerelease GitHub releases
# - Comprehensive testing before any publication
# - Package validation before upload
# =============================================================================

name: Release to PyPI

# =============================================================================
# WORKFLOW TRIGGERS
# =============================================================================
on:
  release:
    types: [released]              # Only run on full releases (not pre-releases)
  workflow_dispatch:               # Allow manual triggering for emergency releases
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

# =============================================================================
# WORKFLOW JOBS
# =============================================================================
jobs:

  # ===========================================================================
  # JOB 1: COMPREHENSIVE TESTING ACROSS PYTHON VERSIONS
  # ===========================================================================
  test-matrix:
    name: Test on Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false            # Continue testing other versions if one fails
      matrix:
        python-version: ['3.11', '3.12']  # Test on supported Python versions

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install dependencies
      run: poetry install

    - name: Run comprehensive test suite
      run: |
        poetry run coverage run -m unittest discover tests -p "test_*.py" -v
        poetry run coverage report -m
        poetry run coverage xml

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  # ===========================================================================
  # JOB 2: CODE QUALITY AND SECURITY CHECKS
  # ===========================================================================
  quality-checks:
    name: Code Quality and Security
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install Poetry
      uses: snok/install-poetry@v1

    - name: Install dependencies
      run: poetry install

    - name: Run MyPy type checking
      run: poetry run mypy src/knitout_interpreter --ignore-missing-imports
      continue-on-error: true      # Don't fail release for type issues (warnings only)

#    - name: Run security scan
#      run: |
#        poetry run safety check
#      continue-on-error: true      # Don't fail release for security warnings

  # ===========================================================================
  # JOB 3: BUILD AND PUBLISH TO PRODUCTION PYPI
  # ===========================================================================
  pypi-release:
    name: Build and Publish to PyPI
    runs-on: ubuntu-latest
    needs: [test-matrix, quality-checks]  # Wait for all tests to pass
    environment:
      name: pypi-production        # Requires manual approval in GitHub settings
      url: https://pypi.org/project/knitout-interpreter/

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Configure Poetry for PyPI
      run: |
        poetry config pypi-token.pypi ${{ secrets.PYPI_API_TOKEN }}
      # Uses the official PyPI repository (no custom repository needed)

    - name: Install dependencies
      run: poetry install

    - name: Run final test suite
      run: |
        poetry run coverage run -m unittest discover tests -p "test_*.py" -v
        poetry run coverage report -m
      # Final safety check before release

    - name: Build package
      run: poetry build

    - name: Validate package
      run: |
        python -m pip install twine
        python -m twine check dist/*
      # Comprehensive package validation

    - name: Publish to PyPI
      run: poetry publish
      # Publishes to production PyPI at https://pypi.org

    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: pypi-release-dist
        path: dist/
        retention-days: 90         # Keep production artifacts longer

  # ===========================================================================
  # JOB 4: BUILD AND DEPLOY DOCUMENTATION
  # ===========================================================================
  deploy-docs:
    name: Deploy Documentation to GitHub Pages
    runs-on: ubuntu-latest
    needs: pypi-release           # Only deploy docs after successful PyPI release
    permissions:
      contents: read
      pages: write
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install sphinx sphinx-rtd-theme
        pip install -e .

    - name: Generate API documentation
      run: |
        cd docs
        sphinx-apidoc -o source ../src/knitout_interpreter --force --separate --no-toc

    - name: Build documentation
      run: |
        cd docs
        sphinx-build -M html source build -W
        touch build/html/.nojekyll

    - name: Upload documentation artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./docs/build/html

    - name: Deploy to GitHub Pages
      uses: actions/deploy-pages@v4

  # ===========================================================================
  # JOB 5: POST-RELEASE VERIFICATION
  # ===========================================================================
  verify-release:
    name: Verify PyPI Release
    runs-on: ubuntu-latest
    needs: pypi-release

    steps:
    - name: Wait for PyPI propagation
      run: sleep 300              # Wait 5 minutes for PyPI to propagate

    - name: Test installation from PyPI
      run: |
        python -m pip install --upgrade pip
        pip install knitout-interpreter
        python -c "import knitout_interpreter; print(f'Successfully installed version {knitout_interpreter.__version__}')"

    - name: Test basic functionality
      run: |
        python -c "
        from knitout_interpreter.knitout_language.Knitout_Parser import parse_knitout
        print('Basic import test passed')
        "

# =============================================================================
# SETUP REQUIREMENTS FOR THIS WORKFLOW
# =============================================================================
#
# 1. GITHUB SECRETS (Repository Settings → Secrets and variables → Actions):
#    - PYPI_API_TOKEN: Your production PyPI API token
#
# 2. GITHUB ENVIRONMENTS (Repository Settings → Environments):
#    - Create environment named 'pypi-production'
#    - Add protection rules:
#      * Required reviewers (yourself or team members)
#      * Restrict to main/master branch only
#      * Optional: Add deployment timeout
#
# 3. PYPI ACCOUNT SETUP:
#    - Account at https://pypi.org (NOT test.pypi.org)
#    - Generate API token with scope for your project
#    - Add token to GitHub secrets as PYPI_API_TOKEN
#
# 4. CODECOV SETUP (Optional):
#    - Account at https://codecov.io
#    - Connect your repository for coverage reporting
#
# =============================================================================

# =============================================================================
# HOW TO USE THIS WORKFLOW
# =============================================================================
#
# RECOMMENDED PROCESS:
# 1. Test thoroughly with your test-pypi workflow first
# 2. Update version in pyproject.toml
# 3. Create GitHub Release:
#    - Go to repository → Releases → Create a new release
#    - Use version tag (e.g., v0.0.18)
#    - Write comprehensive release notes
#    - Do NOT check "This is a pre-release"
#    - Click "Publish release"
# 4. Workflow runs automatically with manual approval step
# 5. Approve deployment in GitHub Actions tab
# 6. Verify release at https://pypi.org/project/knitout-interpreter/
#
# EMERGENCY RELEASE:
# 1. Go to Actions tab → Release to PyPI → Run workflow
# 2. Enter version number manually
# 3. Approve when prompted
#
# AFTER RELEASE:
# - Package available: pip install knitout-interpreter
# - Documentation updated at: https://mhofmann-khoury.github.io/knitout_interpreter/
# - Release artifacts archived in GitHub
#
# =============================================================================
